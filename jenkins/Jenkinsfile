pipeline {
    agent any
    
    tools{
        maven 'Maven'
        jdk 'JDK21'
    }

    environment {
        GITHUB_REPO = 'https://github.com/yasinealbakir/hello-world.git'  
        DOCKER_IMAGE = 'yasinealbakir/hello-world'
        KUBECONFIG = credentials('kubeconfig-credentials-id')             
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Proje clone işlemi yapılıyor...'
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('Build') {
            steps {
                echo 'Proje derleniyor ve testler çalıştırılıyor...'
                bat 'mvn clean package'
            }
        }
        
        stage('Testing') {
            steps {
                echo 'Proje derleniyor ve testler çalıştırılıyor...'
                bat 'mvn clean test'
            }
        }

        stage('Docker Build') {
            steps {
                echo 'Docker imajı oluşturuluyor...'
                bat "docker build -t ${DOCKER_IMAGE}:latest ."
            }
        }

       stage('Docker Push') {
            steps {
                echo 'Docker login olunuyor...'
                withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    bat "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                    bat 'docker push yasinealbakir/hello-world'}
            }
        }

        stage('Deploy to K8S'){
            steps{
                script{
                    withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG')]) {
                    bat "kubectl apply --validate=false -f \"kubernetes-deployment.yaml\""
                    bat "kubectl apply --validate=false -f \"loadbalancer.yaml\""}
                   
                }

            }
        }
        
        

    }

    post {
        always {
            echo 'Pipeline tamamlandı.'
            bat 'docker logout'
        }
        success {
            echo 'Pipeline başarıyla tamamlandı!'
            bat 'docker logout'
        }
        failure {
            echo 'Pipeline sırasında bir hata oluştu.'
            bat 'docker logout'
        }
    }
}
